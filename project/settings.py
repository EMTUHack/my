"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 1.10.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
import dj_database_url

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(__file__))
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = str(os.environ.get('DJANGO_SECRET'))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = eval(os.environ.get('DEBUG', 'true').capitalize())

ALLOWED_HOSTS = eval(os.environ.get('ALLOWED_HOSTS', '["*"]'))

# Current site domain (http://localhost:8000 if locally, probably)
ROOT_URL = str(os.environ.get('ROOT_URL', 'http://localhost:8000'))


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'hackers',
    'main',
    'staff',
    'schedule',
    'sass_processor',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                'main.context_processors.hackathon_info',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    # },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_ROOT = os.path.join(PROJECT_ROOT, 'staticfiles')
STATIC_URL = '/static/'


# Simplified static file serving.
# https://warehouse.python.org/project/whitenoise/
STATICFILES_STORAGE = 'whitenoise.django.GzipManifestStaticFilesStorage'


# Extra places for collectstatic to find static files.
STATICFILES_DIRS = (
    os.path.join(PROJECT_ROOT, 'static'),
)


# Update database configuration with $DATABASE_URL.
db_from_env = dj_database_url.config(conn_max_age=500)
DATABASES['default'].update(db_from_env)


# Honor the 'X-Forwarded-Proto' header for request.is_secure()
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

LOGIN_URL = '/'
LOGIN_REDIRECT_URL = '/dashboard/'

DEFAULT_FROM_EMAIL = str(os.environ.get('HACKATHON_NAME'))
EMAIL_HOST_USER = str(os.environ.get('EMAIL_ACCOUNT'))
EMAIL_HOST_PASSWORD = str(os.environ.get('EMAIL_PASSWORD'))
EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
SERVER_EMAIL = str(os.environ.get('EMAIL_ACCOUNT'))

ADMINS = [('Admin', str(os.environ.get('ADMIN_ACCOUNT'))), ]


# Facebook Stuff
FACEBOOK_KEY = os.environ.get('FACEBOOK_KEY')
FACEBOOK_SECRET = os.environ.get('FACEBOOK_SECRET')
FACEBOOK_HANDLE = os.environ.get('FACEBOOK_HANDLE')
FACEBOOK_PERMISSIONS = eval(os.environ.get('FACEBOOK_PERMISSIONS', '["email"]'))

# GitHub Stuff
GITHUB_KEY = os.environ.get('GITHUB_KEY')
GITHUB_SECRET = os.environ.get('GITHUB_SECRET')
GITHUB_PERMISSIONS = eval(os.environ.get('GITHUB_PERMISSIONS', '[]'))

# Hackathon settings
TEAM_MAX_SIZE = int(os.environ.get('TEAM_MAX_SIZE', 4))
TOKEN_SIZE = int(os.environ.get('TOKEN_SIZE', 6))
ROOT_URL = os.environ.get('ROOT_URL')
HACKATHON_NAME = os.environ.get('HACKATHON_NAME')
HELPER = os.environ.get('HELPER')
CHAT = os.environ.get('CHAT')
EVENT_RULES = os.environ.get('EVENT_RULES')

# Sponsor
AZURE_PASSES = os.environ.get('AZURE_PASSES', None)

# MailChimp
USE_MAILCHIMP = eval(os.environ.get('USE_MAILCHIMP', 'False').capitalize())
MAILCHIMP_USER = os.environ.get('MAILCHIMP_USER', None)
MAILCHIMP_SECRET = os.environ.get('MAILCHIMP_SECRET', None)
MAILCHIMP_LIST_PRE = os.environ.get('MAILCHIMP_LIST_PRE', None)
MAILCHIMP_LIST_CONFIRMED = os.environ.get('MAILCHIMP_LIST_CONFIRMED', None)

# Celery stuff
CELERY_BROKER_URL = str(os.environ.get('REDIS_URL'))

# Google Analytics
GOOGLE_ANALYTICS = os.environ.get('GOOGLE_ANALYTICS', '')
